{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The iAuditor Exporter tool is the primary way to bulk export iAuditor information for use in BI tools such as PowerBI. The tool is coded in the Python programming language and can be ran simply and easily on any computer with Python installed. We also have a Docker image available for those who'd prefer to deploy a container instead. This documentation aims to make it easy to not only set up the tool, but to also understand and make use of the data it gives out. If you feel any part of this documentation is lacking or missing, please reach out to support@safetyculture.com and let us know what you'd like to see.","title":"Home"},{"location":"#overview","text":"The iAuditor Exporter tool is the primary way to bulk export iAuditor information for use in BI tools such as PowerBI. The tool is coded in the Python programming language and can be ran simply and easily on any computer with Python installed. We also have a Docker image available for those who'd prefer to deploy a container instead. This documentation aims to make it easy to not only set up the tool, but to also understand and make use of the data it gives out. If you feel any part of this documentation is lacking or missing, please reach out to support@safetyculture.com and let us know what you'd like to see.","title":"Overview"},{"location":"Install-python/mac/","text":"Install Python on a Mac On the Mac, the best way to install Python is through a tool called Brew, so we'll install that first. Visit: https://brew.sh/ On the home page, you'll see a large \"Install Homebrew\" text, and below that a command that begins like this: /usr/bin/ruby Copy the entire command to your clipboard (highlight it all - if you double click it the entire line will be highlighted - then Right click > copy or press CMD+C) Open the macOS Terminal. Easiest way is to press the magnifying glass icon in the top right corner of your screen or press CMD+Space. From there, search for \"Terminal\" and press Enter. In the Terminal window, paste the command (Edit > Paste, or CMD+V, or right click > paste) from before and again hit enter. Homebrew will explain what it intends to install, press Enter to let it go ahead. Once it's finished, you'll be ready to install Python. Run brew install python3 Assuming you don't get any errors, you're ready to use the script. If you get any errors, let us know. Tip If brew install python3 gives an error, try quitting your Terminal (CMD+Q) and opening it again. Sometimes it needs restarting to detect newly installed software.","title":"Install Python on a Mac"},{"location":"Install-python/mac/#install-python-on-a-mac","text":"On the Mac, the best way to install Python is through a tool called Brew, so we'll install that first. Visit: https://brew.sh/ On the home page, you'll see a large \"Install Homebrew\" text, and below that a command that begins like this: /usr/bin/ruby Copy the entire command to your clipboard (highlight it all - if you double click it the entire line will be highlighted - then Right click > copy or press CMD+C) Open the macOS Terminal. Easiest way is to press the magnifying glass icon in the top right corner of your screen or press CMD+Space. From there, search for \"Terminal\" and press Enter. In the Terminal window, paste the command (Edit > Paste, or CMD+V, or right click > paste) from before and again hit enter. Homebrew will explain what it intends to install, press Enter to let it go ahead. Once it's finished, you'll be ready to install Python. Run brew install python3 Assuming you don't get any errors, you're ready to use the script. If you get any errors, let us know. Tip If brew install python3 gives an error, try quitting your Terminal (CMD+Q) and opening it again. Sometimes it needs restarting to detect newly installed software.","title":"Install Python on a Mac"},{"location":"Install-python/overview/","text":"1. Install Python The iAuditor Exporter is coded in a language called Python so we need to install Python so that your computer can understand the code. Python is available in many different versions, ranging from version 2.7 all the way through to 3.8 at the time of writing. For our script, you'll need at least Python 3.6. Installation varies depending on the operating system you're using: If you're on Windows, start here If you're on macOS, start here","title":"1. Install Python"},{"location":"Install-python/overview/#1-install-python","text":"The iAuditor Exporter is coded in a language called Python so we need to install Python so that your computer can understand the code. Python is available in many different versions, ranging from version 2.7 all the way through to 3.8 at the time of writing. For our script, you'll need at least Python 3.6. Installation varies depending on the operating system you're using:","title":"1. Install Python"},{"location":"Install-python/overview/#if-youre-on-windows-start-here","text":"","title":"If you're on Windows, start here"},{"location":"Install-python/overview/#if-youre-on-macos-start-here","text":"","title":"If you're on macOS, start here"},{"location":"Install-python/windows/","text":"Install Python on Windows Visit Python's Windows Releases Page: https://www.python.org/downloads/windows/ This page contains a lot of links, the section you need is on the left hand side titled \"Stable Releases\" Under \"Stable Releases\" you'll see various download options. In 99% of cases you'll be able to use the one called Windows x86-64 exectuable installer This will begin the download, once done open the file and click through the installer - the defaults are fine, feel free to keep clicking continue through them. On the final page before clicking 'Finish' there is a tick box that reads \"Add to PATH\" - ensure this is ticked. If you're reading this having already missed the tickbox, simply re-run the installer, and it'll ask again at the end. That's it! We can now move on to the script.","title":"Install Python on Windows"},{"location":"Install-python/windows/#install-python-on-windows","text":"Visit Python's Windows Releases Page: https://www.python.org/downloads/windows/ This page contains a lot of links, the section you need is on the left hand side titled \"Stable Releases\" Under \"Stable Releases\" you'll see various download options. In 99% of cases you'll be able to use the one called Windows x86-64 exectuable installer This will begin the download, once done open the file and click through the installer - the defaults are fine, feel free to keep clicking continue through them. On the final page before clicking 'Finish' there is a tick box that reads \"Add to PATH\" - ensure this is ticked. If you're reading this having already missed the tickbox, simply re-run the installer, and it'll ask again at the end. That's it! We can now move on to the script.","title":"Install Python on Windows"},{"location":"install-intros/detailed-install/","text":"Detailed Guidance There are 4 steps to setting up this script: Installing Python Downloading the Script Installing the Scripts requirements Configuring the Script Tip At multiple points you'll be asked to \"run\" commands in a terminal or command prompt window. You'll know it's a command you need to run because it'll be formatted like this: run me All you need to do is copy the suggested the command (just highclight them > right click > copy) and then paste them in. Once you've pasted in the command, you need to press Enter on your keyboard to submit the command. If you receive any errors such as 'Command Not Found' or 'File Not Found' when running commands, go back through the guidance and ensure you're in the right folder.","title":"Detailed Guidance"},{"location":"install-intros/detailed-install/#detailed-guidance","text":"There are 4 steps to setting up this script: Installing Python Downloading the Script Installing the Scripts requirements Configuring the Script Tip At multiple points you'll be asked to \"run\" commands in a terminal or command prompt window. You'll know it's a command you need to run because it'll be formatted like this: run me All you need to do is copy the suggested the command (just highclight them > right click > copy) and then paste them in. Once you've pasted in the command, you need to press Enter on your keyboard to submit the command. If you receive any errors such as 'Command Not Found' or 'File Not Found' when running commands, go back through the guidance and ensure you're in the right folder.","title":"Detailed Guidance"},{"location":"install-intros/introduction/","text":"Installation Overview If you're comfortable using Git and running commands from the command prompt, these instructions should give you what you need: Quick install instructions Detailed Guidance If you're new to running scripts, follow the detailed guidance .","title":"Installation"},{"location":"install-intros/introduction/#installation","text":"","title":"Installation"},{"location":"install-intros/introduction/#overview","text":"If you're comfortable using Git and running commands from the command prompt, these instructions should give you what you need:","title":"Overview"},{"location":"install-intros/introduction/#quick-install-instructions","text":"","title":"Quick install instructions"},{"location":"install-intros/introduction/#detailed-guidance","text":"If you're new to running scripts, follow the detailed guidance .","title":"Detailed Guidance"},{"location":"install-intros/quick-install/","text":"Quick Install Install Python 3.6+ If you've used the SafetyCulture Python SDK before, you need to uninstall it (if you're unsure, run the command anyway): pip uninstall safetyculture-sdk-python Use Git to clone the repository and move to it in terminal/command prompt: git clone https://github.com/SafetyCulture/iauditor-exporter.git cd iauditor-exporter Run pip install -r requirements.txt If you need SQL support, you'll need the driver installed. Install the relevant driver from here Open configs/config.yaml and edit as per the guidance here Run python exporter.py --format sql (Additional options available, see here ) Tip If you're on a Mac and installed Python using Brew, it's possible your Python install may be python3 instead of just python and similarly pip3 instead of pip","title":"Quick Install"},{"location":"install-intros/quick-install/#quick-install","text":"Install Python 3.6+ If you've used the SafetyCulture Python SDK before, you need to uninstall it (if you're unsure, run the command anyway): pip uninstall safetyculture-sdk-python Use Git to clone the repository and move to it in terminal/command prompt: git clone https://github.com/SafetyCulture/iauditor-exporter.git cd iauditor-exporter Run pip install -r requirements.txt If you need SQL support, you'll need the driver installed. Install the relevant driver from here Open configs/config.yaml and edit as per the guidance here Run python exporter.py --format sql (Additional options available, see here ) Tip If you're on a Mac and installed Python using Brew, it's possible your Python install may be python3 instead of just python and similarly pip3 instead of pip","title":"Quick Install"},{"location":"script-download/git/","text":"Installing Git We host the script on GitHub, so the easiest way to download the script is by what's known as 'cloning' the repository. Cloning has other additional benefits, mainly around updating the code as and when we publish updates. Downloading Git on Windows Warning Please note you'll need to be an admin to install Git successfully. If you're not, either speak to your administrator or use the manual process You can download Git for Windows from this link - the download will start automatically (if it doesn't, click 'Click here to download manually'): https://git-scm.com/download/win Open the installer and begin installation. All the defaults are fine so keep clicking continue until it begins installing. Once done, click 'Next' again to close the installer (the installer offers to launch Git but this isn't necessary for our purposes.) Assuming you do not get any errors, you can continue to download the script. Keep your command prompt open and follow the 'Download the Script' steps below. Download Git on macOS If you've been following this guidance from the beginning, you'll have installed Homebrew to install Python. If you didn't, go back and install Homebrew . Open your terminal window again (remember you can get to it by searching for it by clicking the magnifying glass in the top right) Run brew install git Assuming you do not get any errors, you can continue to download the script. Keep your terminal window open for the next step. Download the Script In your terminal or command prompt, we need to move to the location where you want to store the script. We recommend your Documents folder. Navigate to the folder where you want to store the script in either Finder on macOS or Windows Explorer if you're on Windows. In your terminal or command prompt type cd and then press the spacebar once (but don't press enter) Drag and drop the folder from Finder/Windows Explorer, and drop it into the terminal/command prompt. Press Enter. You can now run git clone https://github.com/SafetyCulture/iauditor-exporter.git Once completed, we can move on to the configuration stage.","title":"Installing Git"},{"location":"script-download/git/#installing-git","text":"We host the script on GitHub, so the easiest way to download the script is by what's known as 'cloning' the repository. Cloning has other additional benefits, mainly around updating the code as and when we publish updates.","title":"Installing Git"},{"location":"script-download/git/#downloading-git-on-windows","text":"Warning Please note you'll need to be an admin to install Git successfully. If you're not, either speak to your administrator or use the manual process You can download Git for Windows from this link - the download will start automatically (if it doesn't, click 'Click here to download manually'): https://git-scm.com/download/win Open the installer and begin installation. All the defaults are fine so keep clicking continue until it begins installing. Once done, click 'Next' again to close the installer (the installer offers to launch Git but this isn't necessary for our purposes.) Assuming you do not get any errors, you can continue to download the script. Keep your command prompt open and follow the 'Download the Script' steps below.","title":"Downloading Git on Windows"},{"location":"script-download/git/#download-git-on-macos","text":"If you've been following this guidance from the beginning, you'll have installed Homebrew to install Python. If you didn't, go back and install Homebrew . Open your terminal window again (remember you can get to it by searching for it by clicking the magnifying glass in the top right) Run brew install git Assuming you do not get any errors, you can continue to download the script. Keep your terminal window open for the next step.","title":"Download Git on macOS"},{"location":"script-download/git/#download-the-script","text":"In your terminal or command prompt, we need to move to the location where you want to store the script. We recommend your Documents folder. Navigate to the folder where you want to store the script in either Finder on macOS or Windows Explorer if you're on Windows. In your terminal or command prompt type cd and then press the spacebar once (but don't press enter) Drag and drop the folder from Finder/Windows Explorer, and drop it into the terminal/command prompt. Press Enter. You can now run git clone https://github.com/SafetyCulture/iauditor-exporter.git Once completed, we can move on to the configuration stage.","title":"Download the Script"},{"location":"script-download/manual-dl/","text":"Manually Downloading the Script If you're unable to use Git, you can manually download the script. Go to this link: https://github.com/SafetyCulture/iauditor-exporter/archive/master.zip Copy the downloaded zip file into a folder you can access. Your Documents folder tends to be a good choice. Extract the folder - in Windows just right click and select 'Extract All'. On macOS, just double click it. Open up the extracted folder, we'll cover setting up the script in the next section.","title":"Manually Downloading the Script"},{"location":"script-download/manual-dl/#manually-downloading-the-script","text":"If you're unable to use Git, you can manually download the script. Go to this link: https://github.com/SafetyCulture/iauditor-exporter/archive/master.zip Copy the downloaded zip file into a folder you can access. Your Documents folder tends to be a good choice. Extract the folder - in Windows just right click and select 'Extract All'. On macOS, just double click it. Open up the extracted folder, we'll cover setting up the script in the next section.","title":"Manually Downloading the Script"},{"location":"script-running/export-options/","text":"Export Options Although the primary use for this tool is to export inspection data into either CSV or SQL, there are other formats supported. You can run any of these options either individually or together by adding them with a space when running the tool: python exporter.py --format sql actions media In the above example, you'd export all your inspection data and actions to SQL, as well as locally downloading all associated media. Formats CSV python exporter.py --format csv Exports all available inspection data into CSV format. See here for detailed discussion of the output. SQL python exporter.py --format sql Exports all available inspection data into the configured SQL database. See here for detailed discussion of the output See here for detailed discussion of how we structure the SQL table Actions python exporter.py --format actions Exports all available Actions into a CSV table. Actions SQL python exporter.py --format actions-sql Exports all available Actions into a SQL table. PDF/DOCX python exporter.py --format pdf or python exporter.py --format docx Or combine them and have both: python exporter.py --format pdf docx Exports all available inspections in PDF and/or DOCX (Word) format. Media Exports all the media attached to available inspections and stores them in a folder per inspection. Files are named with their unique media ID + the file extension of the image. More information on this can be found in the tip here . Web Report Links python exporter.py --format web-report-link Exports a CSV file of AuditIDs along with their public web report links. This is really useful when working with tools like PowerBI, as you can use it as a reference table for web report links without having to store them multiple times in the main dataset. SQL support for this table is coming soon. The CSV file includes five columns: Template ID, Template Name, Audit ID, Audit Name, and Web Report Link. Warning By running the tool with this option, we'll generate public links for every inspection available. Although these links will not be tracked by search engines, they are still completely public by design. If you do not want any of your inspections to have generated public URLs, do not use this option. JSON Exports all available inspections in JSON format. The output here is no different to downloading inspections directly from the API. Additional Parameters Loop python exporter.py --format sql --loop By default, if there are more than 1000 inspections to export or once all inspections have exported, the tool will exit. By adding --loop when running the tool, the script will wait the number of seconds defined by sync_delay_in_seconds in the config file (default is 900 seconds/15 minutes) and continue. Config python exporter.py --format sql --config new_config.yaml You may need to maintain multiple configurations, in which case you can define the name of the configuration file you wish to use. By default we look in the configs folder for a file called config.yaml . If you want to use a different file, just drop it into the configs folder and reference it here.","title":"Export Options"},{"location":"script-running/export-options/#export-options","text":"Although the primary use for this tool is to export inspection data into either CSV or SQL, there are other formats supported. You can run any of these options either individually or together by adding them with a space when running the tool: python exporter.py --format sql actions media In the above example, you'd export all your inspection data and actions to SQL, as well as locally downloading all associated media.","title":"Export Options"},{"location":"script-running/export-options/#formats","text":"","title":"Formats"},{"location":"script-running/export-options/#csv","text":"python exporter.py --format csv Exports all available inspection data into CSV format. See here for detailed discussion of the output.","title":"CSV"},{"location":"script-running/export-options/#sql","text":"python exporter.py --format sql Exports all available inspection data into the configured SQL database. See here for detailed discussion of the output See here for detailed discussion of how we structure the SQL table","title":"SQL"},{"location":"script-running/export-options/#actions","text":"python exporter.py --format actions Exports all available Actions into a CSV table.","title":"Actions"},{"location":"script-running/export-options/#actions-sql","text":"python exporter.py --format actions-sql Exports all available Actions into a SQL table.","title":"Actions SQL"},{"location":"script-running/export-options/#pdfdocx","text":"python exporter.py --format pdf or python exporter.py --format docx Or combine them and have both: python exporter.py --format pdf docx Exports all available inspections in PDF and/or DOCX (Word) format.","title":"PDF/DOCX"},{"location":"script-running/export-options/#media","text":"Exports all the media attached to available inspections and stores them in a folder per inspection. Files are named with their unique media ID + the file extension of the image. More information on this can be found in the tip here .","title":"Media"},{"location":"script-running/export-options/#web-report-links","text":"python exporter.py --format web-report-link Exports a CSV file of AuditIDs along with their public web report links. This is really useful when working with tools like PowerBI, as you can use it as a reference table for web report links without having to store them multiple times in the main dataset. SQL support for this table is coming soon. The CSV file includes five columns: Template ID, Template Name, Audit ID, Audit Name, and Web Report Link. Warning By running the tool with this option, we'll generate public links for every inspection available. Although these links will not be tracked by search engines, they are still completely public by design. If you do not want any of your inspections to have generated public URLs, do not use this option.","title":"Web Report Links"},{"location":"script-running/export-options/#json","text":"Exports all available inspections in JSON format. The output here is no different to downloading inspections directly from the API.","title":"JSON"},{"location":"script-running/export-options/#additional-parameters","text":"","title":"Additional Parameters"},{"location":"script-running/export-options/#loop","text":"python exporter.py --format sql --loop By default, if there are more than 1000 inspections to export or once all inspections have exported, the tool will exit. By adding --loop when running the tool, the script will wait the number of seconds defined by sync_delay_in_seconds in the config file (default is 900 seconds/15 minutes) and continue.","title":"Loop"},{"location":"script-running/export-options/#config","text":"python exporter.py --format sql --config new_config.yaml You may need to maintain multiple configurations, in which case you can define the name of the configuration file you wish to use. By default we look in the configs folder for a file called config.yaml . If you want to use a different file, just drop it into the configs folder and reference it here.","title":"Config"},{"location":"script-running/overview/","text":"Running the iAuditor Extractor Tool Each time you want to run the tool, you need to ensure you have used the cd command to move into the correct directory. If you're unsure how to do this, please refer to the 'Installing Requirements' section for guidance. If you've come to this page directly from the configuration stage, you should be ready to go. On Windows, run: python exporter.py --format csv On macOS, run: python3 exporter.py --format csv","title":"Running the iAuditor Extractor Tool"},{"location":"script-running/overview/#running-the-iauditor-extractor-tool","text":"Each time you want to run the tool, you need to ensure you have used the cd command to move into the correct directory. If you're unsure how to do this, please refer to the 'Installing Requirements' section for guidance. If you've come to this page directly from the configuration stage, you should be ready to go. On Windows, run: python exporter.py --format csv On macOS, run: python3 exporter.py --format csv","title":"Running the iAuditor Extractor Tool"},{"location":"script-setup/config/","text":"Editing the Config File Key Options for all formats Setting Optional? Accepted Parameters Description token No N/A Your API key, generated from iAuditor. Click here for guidance config_name No N/A You can set the name of your configuration here. Very useful if you're managing multiple configurations as it'll be used to name files and organise folders. Do not use any spaces in this name. export_completed Yes true false both By default, we only export completed inspections from iAuditor. Set this to true to only receive completed audits, false to only receive incomplete inspections or both to export everything regardless of status. In the dataset, anything without a completed date is considered incomplete. export_archived Yes true false both By default, we do not export inspections . Set this to true to only receive archived inspections, false to only receive archived inspections or both to export everything regardless of status. In the dataset, the column Archived will be either true or false depending on the inspections current status. template_ids Yes See the tip below Here you can specify the templates from which you'd like to download your data. Leave this option blank to export all available information. See the tip below for additional guidance. Tip When setting template IDs you wish to export, you need to format the templates into a list like this: template_123,template456,template,789 . If you want just one template, just write it on its own like this: template_123 . If you have a large list of template IDs, you can save them into a .txt file. Place this in the same directory as exporter.py and enter the filename in this option (e.g. templates.txt ). There is a limit on the number of templates you can place in a text file, if you receive errors you'll need to reduce it down or export everything and filter it afterwards. Options only for CSV Setting Optional? Accepted Parameters Description use_real_template_name Yes true false single_file When exporting CSV files, we will export the files using template IDs. Setting this to true will override this and use the template name. You can also set single_file and the export will go to a single CSV file rather than splitting it across templates. This options has some caveats, please see the warning below. Warning We only recommend using the real template name if you are doing a one-off export. If a template is renamed, the script will create a new file rather than appending to the existing one. You also need to ensure that no two templates have the same name as the script would have no way to differentiate between the two. If in doubt, keep this as either false or single_file Options only for SQL Setting Optional? Accepted Parameters Description merge_rows/action_merge_rows Yes true false This setting, when set to true will update existing rows in the database when an inspection is updated after being logged. There are important caveats to this option, please review the tips and warnings below. Warning There are some important caveats to enabling this option (namely it can make your exports slower, the dataset larger and cause increased database requests.) You should review the model documentation to fully understand how this works before enabling it. Tip This setting can only be set before the database table is created. If you need to change this setting at a later date, you will need to drop the table first and allow it to be recreated. When enabled, export_inactive_items is forced to be true (Explained here: the model ) Other SQL Options You must fill out all these configuration options to use the SQL export. Setting Description sql_table The name of the table in which you want to store your iAuditor information. Best practice is to make sure it doesn't exist, as the script will create it for you. If you want to build it yourself, check the model . database_type For SQL use 'mssql+pyodbc_mssql' (More should work, however they're currently untested. please refer to the SQLAlchemy documentation) database_user The username to login to your database database_pwd Your database password database_server Server where your database is located database_port The port your database is listening on (For SQL, this is usually 1433) database_name The name of the database you'll be connecting to. You must also define the driver to use if you need to - for SQL you'll likely want to use MyDatebase?driver=ODBC Driver 17 for SQL Server - replacing MyDatabase with the name of your database. Other Options Setting Optional? Description export_path Yes absolute or relative path to the directory where to save exported data to (this applies to everything except SQL exports) filename Yes an audit item ID whose response is going to be used to name the files of exported audit reports. Can only be an item with a response type of text from the header section of the audit such as Audit Title, Document No., Client / Site, Prepared By, Personnel, or any custom header item which has a 'text' type response (Only applies to PDF/Word Exports) preferences Yes to apply a preference transformation to particular templates, give here a list of preference ids. sync_delay_in_seconds Yes time in seconds to wait after completing one export run, before running again export_inactive_items Yes This setting only applies when exporting to CSV. Valid values are true (export all items) or false (do not export inactive items). Items that are nested under Smart Field will be 'inactive' if the smart field condition is not satisfied for these items. This option is forced to true if you're using SQL and enable either of the merge_rows options. media_sync_offset_in_seconds Yes time in seconds since an audit has been modified before it will by synced","title":"Editing the Config File"},{"location":"script-setup/config/#editing-the-config-file","text":"","title":"Editing the Config File"},{"location":"script-setup/config/#key-options-for-all-formats","text":"Setting Optional? Accepted Parameters Description token No N/A Your API key, generated from iAuditor. Click here for guidance config_name No N/A You can set the name of your configuration here. Very useful if you're managing multiple configurations as it'll be used to name files and organise folders. Do not use any spaces in this name. export_completed Yes true false both By default, we only export completed inspections from iAuditor. Set this to true to only receive completed audits, false to only receive incomplete inspections or both to export everything regardless of status. In the dataset, anything without a completed date is considered incomplete. export_archived Yes true false both By default, we do not export inspections . Set this to true to only receive archived inspections, false to only receive archived inspections or both to export everything regardless of status. In the dataset, the column Archived will be either true or false depending on the inspections current status. template_ids Yes See the tip below Here you can specify the templates from which you'd like to download your data. Leave this option blank to export all available information. See the tip below for additional guidance. Tip When setting template IDs you wish to export, you need to format the templates into a list like this: template_123,template456,template,789 . If you want just one template, just write it on its own like this: template_123 . If you have a large list of template IDs, you can save them into a .txt file. Place this in the same directory as exporter.py and enter the filename in this option (e.g. templates.txt ). There is a limit on the number of templates you can place in a text file, if you receive errors you'll need to reduce it down or export everything and filter it afterwards.","title":"Key Options for all formats"},{"location":"script-setup/config/#options-only-for-csv","text":"Setting Optional? Accepted Parameters Description use_real_template_name Yes true false single_file When exporting CSV files, we will export the files using template IDs. Setting this to true will override this and use the template name. You can also set single_file and the export will go to a single CSV file rather than splitting it across templates. This options has some caveats, please see the warning below. Warning We only recommend using the real template name if you are doing a one-off export. If a template is renamed, the script will create a new file rather than appending to the existing one. You also need to ensure that no two templates have the same name as the script would have no way to differentiate between the two. If in doubt, keep this as either false or single_file","title":"Options only for CSV"},{"location":"script-setup/config/#options-only-for-sql","text":"Setting Optional? Accepted Parameters Description merge_rows/action_merge_rows Yes true false This setting, when set to true will update existing rows in the database when an inspection is updated after being logged. There are important caveats to this option, please review the tips and warnings below. Warning There are some important caveats to enabling this option (namely it can make your exports slower, the dataset larger and cause increased database requests.) You should review the model documentation to fully understand how this works before enabling it. Tip This setting can only be set before the database table is created. If you need to change this setting at a later date, you will need to drop the table first and allow it to be recreated. When enabled, export_inactive_items is forced to be true (Explained here: the model )","title":"Options only for SQL"},{"location":"script-setup/config/#other-sql-options","text":"You must fill out all these configuration options to use the SQL export. Setting Description sql_table The name of the table in which you want to store your iAuditor information. Best practice is to make sure it doesn't exist, as the script will create it for you. If you want to build it yourself, check the model . database_type For SQL use 'mssql+pyodbc_mssql' (More should work, however they're currently untested. please refer to the SQLAlchemy documentation) database_user The username to login to your database database_pwd Your database password database_server Server where your database is located database_port The port your database is listening on (For SQL, this is usually 1433) database_name The name of the database you'll be connecting to. You must also define the driver to use if you need to - for SQL you'll likely want to use MyDatebase?driver=ODBC Driver 17 for SQL Server - replacing MyDatabase with the name of your database.","title":"Other SQL Options"},{"location":"script-setup/config/#other-options","text":"Setting Optional? Description export_path Yes absolute or relative path to the directory where to save exported data to (this applies to everything except SQL exports) filename Yes an audit item ID whose response is going to be used to name the files of exported audit reports. Can only be an item with a response type of text from the header section of the audit such as Audit Title, Document No., Client / Site, Prepared By, Personnel, or any custom header item which has a 'text' type response (Only applies to PDF/Word Exports) preferences Yes to apply a preference transformation to particular templates, give here a list of preference ids. sync_delay_in_seconds Yes time in seconds to wait after completing one export run, before running again export_inactive_items Yes This setting only applies when exporting to CSV. Valid values are true (export all items) or false (do not export inactive items). Items that are nested under Smart Field will be 'inactive' if the smart field condition is not satisfied for these items. This option is forced to true if you're using SQL and enable either of the merge_rows options. media_sync_offset_in_seconds Yes time in seconds since an audit has been modified before it will by synced","title":"Other Options"},{"location":"script-setup/installing-packages/","text":"Setting up the script and installing requirements In the previous steps you will have either downloaded the zip file from GitHub, or cloned the repository. Either of these options will have produced a folder containing the script. Steps for all users Open Windows Explorer (Windows) or Finder (macOS) and move to the folder where you downloaded the script. If you cloned it, it'll be called iauditor_exporter . If you downloaded the zip file the extracted folder will be called iauditor_exporter_master - if you're following along, you'll likely already have this open. Open your Command Prompt (Windows) or Terminal (macOS) - On Windows, click into the search box either on your Start Menu or on the taskbar, and type 'cmd' - press enter to launch the Command Prompt. On macOS, search for it using Spotlight (magnifying glass in the top right.) In your terminal/cmd window, type: cd and press the spacebar once Drag and drop either iauditor_exporter or iauditor_exporter_master onto the terminal/cmd window then press Enter. On Windows, run: pip install -r requirements.txt On macOS, run: pip3 install -r requirements.txt If you do not require SQL support, you can stop here. Otherwise, see below. Additional Steps for SQL users In addition to the requirements installed before, you'll also need an ODBC driver to interact with your SQL server. Ensure you've completed the steps above first. Visit Microsoft's website and download the appropriate driver On Windows, it's an installable exe file. Download it and Windows will take you through the installation. On macOS, you'll be redirected to a series of commands to run in your terminal. Run them one line at a time, in the same way you have for the other steps in this documentation. Tip The cd command means change directory so it tells the terminal/command prompt to move into that particular folder. You can run ls to see the contents of the folder, too.","title":"Setting up the script and installing requirements"},{"location":"script-setup/installing-packages/#setting-up-the-script-and-installing-requirements","text":"In the previous steps you will have either downloaded the zip file from GitHub, or cloned the repository. Either of these options will have produced a folder containing the script.","title":"Setting up the script and installing requirements"},{"location":"script-setup/installing-packages/#steps-for-all-users","text":"Open Windows Explorer (Windows) or Finder (macOS) and move to the folder where you downloaded the script. If you cloned it, it'll be called iauditor_exporter . If you downloaded the zip file the extracted folder will be called iauditor_exporter_master - if you're following along, you'll likely already have this open. Open your Command Prompt (Windows) or Terminal (macOS) - On Windows, click into the search box either on your Start Menu or on the taskbar, and type 'cmd' - press enter to launch the Command Prompt. On macOS, search for it using Spotlight (magnifying glass in the top right.) In your terminal/cmd window, type: cd and press the spacebar once Drag and drop either iauditor_exporter or iauditor_exporter_master onto the terminal/cmd window then press Enter. On Windows, run: pip install -r requirements.txt On macOS, run: pip3 install -r requirements.txt If you do not require SQL support, you can stop here. Otherwise, see below.","title":"Steps for all users"},{"location":"script-setup/installing-packages/#additional-steps-for-sql-users","text":"In addition to the requirements installed before, you'll also need an ODBC driver to interact with your SQL server. Ensure you've completed the steps above first. Visit Microsoft's website and download the appropriate driver On Windows, it's an installable exe file. Download it and Windows will take you through the installation. On macOS, you'll be redirected to a series of commands to run in your terminal. Run them one line at a time, in the same way you have for the other steps in this documentation. Tip The cd command means change directory so it tells the terminal/command prompt to move into that particular folder. You can run ls to see the contents of the folder, too.","title":"Additional Steps for SQL users"},{"location":"understanding-the-data/csv-or-sql/","text":"CSV or SQL? We would encourage the use of SQL if possible as it is more scalable as you grow, and refreshing the data from a database is much faster than one from CSV files. A SQL database is also able to offer other benefits such as the merging of duplicate entries which isn't possible with CSV. However, if you are a small organisation, or do not have access to a SQL database, CSV files offer the exact same data output.","title":"CSV or SQL?"},{"location":"understanding-the-data/csv-or-sql/#csv-or-sql","text":"We would encourage the use of SQL if possible as it is more scalable as you grow, and refreshing the data from a database is much faster than one from CSV files. A SQL database is also able to offer other benefits such as the merging of duplicate entries which isn't possible with CSV. However, if you are a small organisation, or do not have access to a SQL database, CSV files offer the exact same data output.","title":"CSV or SQL?"},{"location":"understanding-the-data/datastructure/","text":"Columns The exported data is split down into many columns which can appear confusing at first. Keep in mind that the data from this tool is designed to be pivoted so don't be put off if opening the files in Excel appears unusual. Info The columns are listed here in the same order they appear in the output. All columns are of type String in SQL unless stated otherwise. ItemType This column describes the type of item information in this particular row. Possible values are: Question Types question list media signature slider text textsingle address checkbox datetime drawing Organisational Elements category section smartfield information Repeating Section-Related Elements dynamicfield element primelement Tip In some cases, the type may change between question and list. This occurs if the response set associated with a question changes. A question becomes a list type under these circumstances: More than 5 possible response options One response is more than 30 characters in length Tip In some cases, the type may change between text and textsingle. This occurs if the text field is changed from a single line to a paragraph. Label The question itself asked within the given inspection. Tip If a question is reworded, any newly completed inspections will have the new label so be careful filtering on the label. Response The given by the person conducting the audit. Comment iAuditor allows users to add notes to questions. If any notes have been left on a question, they'll be logged here Tip These are essentially free text fields so users can type whatever they want. Visualisations like Word Clouds may be a good choice with these, or picking out key words. MediaHyperTextReference iAuditor allows users to add images to almost all question types. If one or more images have been attached to a question, they will be logged in this column. All images in iAuditor are given a unique ID which we call a media_id . When logged in this column, we use media_id and append the file extension. Tip Usually the image format is .jpg however we support other image formats. It's also possible this could change over time, hence why it's logged here rather than assumed. This exporter tool allows for the exporting of media. When you do this, the images are stored in the same format logged here ( media_id + file extension) making it easy to reference images you've downloaded. If you want to make API calls to the media_id , you'll need to split the column first and remove the file extension. Latitude Some questions in iAuditor, such as the location and address item types can have location information attached to them. If that information is available, it is logged here. Longitude See Latitude ItemScore SQL Data Type : Float If a question has been scored (this is set when creating a template), its score is logged here. Tip Item scores can be decimals so consider this column a Float . ItemMaxScore SQL Data Type: Float The maximum score a question can potentially score. ItemScorePercentage SQL Data Type: Float The percentage score of a question. Tip The percentage is represented in full, so 100% is shown as 100. Depending on your tool, you may wish to divide this column by 100 so it renders correctly as a percentage. (this is the case in PowerBI) Mandatory SQL Data Type: Boolean In the iAuditor template editor, questions can be marked as mandatory (e.g. an inspection cannot be marked as complete until all mandatory questions have been answered.) All items are given either a True or False value. FailedResponse SQL Data Type: Boolean Particular responses in iAuditor can be given a failed status. This means that the particular response was considered to be something incorrect and tends to be an important data point to review. Inactive SQL Data Type: Boolean Sometimes questions within inspections may never be seen by the user. For example, we have logic fields where questions appear depending on the response of a previous question. In these instances, the questions that were not activated by the logic field would be considered inactive. By default, the exporter does not export inactive items so usually this is False for everything. AuditID SQL Note: Forms part of the Primary Key in SQL This is the unique ID of a particular audit. Tip Unique across the entire iAuditor platform - not just your own organisation. Never changes. ItemID SQL Note: Forms part of the Primary Key in SQL Every item in a particular inspection is allocated an Item ID. Tip Item IDs are only unique within an inspection . The ID is inherited from the parent template, so questions will have the same Item ID across audits conducted from the same template. DatePK SQL Note: Forms part of the Primary Key in SQL The date presented in EPOCH format (e.g. number of seconds since January 1st 1970) - Exists to be used as part of three column primary key with AuditID and ItemID. Please see the Primary Key section for further explanation. ResponseID Any response that isn't free text will be assigned an ID. These are unique within an audit . If you want to track a particular response, tracking the ID is usually more robust as it avoids any issues should someone rename a response. ParentID All items (except the very top item) have a parent ID which signifies the item that the current item proceeds. Traversing the ItemID > ParentID chain can help make sense of how a particular inspection is conducted. AuditOwner The name of the user who originally started the inspection AuditOwnerID As above, but returns the unique User ID of the particular user. AuditAuthor The name of the user who last modified the inspection AuditAuthorID As above, but returns the unique User ID of the particular user. AuditName The title of the inspection as generated in iAuditor AuditScore SQL Data Type: Float The score of the entire inspection AuditMaxScore SQL Data Type: Float The maximum score the particular inspection can achieve AuditScorePercentage SQL Data Type: Float The percentage score of the given inspection. Tip The percentage is represented in full, so 100% is shown as 100. Depending on your tool, you may wish to divide this column by 100 so it renders correctly as a percentage. (This is the case in PowerBI) AuditDuration SQL Data Type: Integer The time taken to conduct an inspection, recorded in seconds. Tip If a user conducts an inspection using our website, the duration isn't currently logged and will return blank. DateStarted SQL Data Type: DateTime The date the inspection was started presented in UTC format. Tip This is the date when the inspection was created on our platform. In the majority of cases, this will be the same or very close to the 'ConductedOn' date, however sometimes it may appear wildly different. If an inspection is started (most likely via our API), then subsequently edited and completed by a user, the DateStarted may appear anomalous. Where possible, use ConductedOn instead. DateModified SQL Data Type: DateTime The date the inspection was last modified presented in UTC format. Tip The date modified will update whenever an inspection is modified by a user, so it's possible that this may change after an inspection has been marked as complete. DateCompleted SQL Data Type: DateTime The date the inspection was last marked as complete presented in UTC format. Tip The date completed will update if 'Complete' is pressed in the inspection a second time, usually after modifications have been made. TemplateID The unique ID of the template. Tip The Template ID is unique across the entire iAuditor platform The Template ID never changes TemplateName The name of the template at the time the inspection was completed TemplateAuthor The user who created the template TemplateAuthorID As above, but the unique User ID is returned instead. ItemCategory Within a template, questions can be nested inside sections and categorys . For each item in the inspection, we traverse the ItemID and ParentID chain until we find a item type of either section or category . When this occurs, the label of that item is logged here. Tip The ItemCategory column is incredibly useful for grouping data together with like questions. You may need to work with those creating templates to ensure questions are nested effectively to give the required ItemCategory RepeatingSectionParentID Within iAuditor, it is possible to have sets of questions that users can chose to repeat. For example, if you're inspecting rooms in a hotel, you may use a repeating section to repeat the same set of questions for each room within the hotel. To make modelling easier, this column contains the ID of the item that all questions within a repeating section have in common. If you're working with repeating sections (they're of type dynamicfield ), you'll want to group the data on this column. If a question isn't part of a repeating section, this column will be blank. DocumentNo This is an optional feature of iAuditor where a document number is generated. This is usually different in each template. Tip Document Numbers will have an incrementing number as part of the resulting value. However, this is created by a users device so it's possible that multiple inspections could have the same document number. For this reason, it tends to be less useful to model on the Document Number. ConductedOn SQL Data Type: DateTime Assuming the template includes the 'Conducted On' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with a UTC time stamp. As this is a question, it's possible for the user to pick any time value they like, however usually they'll tap 'Now' and it'll insert the current time. PreparedBy Assuming the template includes the 'Prepared By' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with the name of the person who conducted the inspection. Location Assuming the template includes the 'Location' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with the inputted location. The formatting of this can vary quite a bit, for better location tracking use the Latitude and Longitude columns. Personnel This is an old field from an older version of our template editor. We've now removed this as an option so it'll only be populated if you're accessing data from an organisation created before late-2019. The field was a free text field so its input will vary depending on use case. Clientsite This is an old field from an older version of our template editor. We've now removed this as an option so it'll only be populated if you're accessing data from an organisation created before late-2019. The field was a free text field so its input will vary depending on use case. AuditSite The selected Site (specifically referring to the iAuditor Sites feature) Tip Sites are centrally managed by an admin and so make for a great way to group data together. Sites can be renamed so they may change in the data if this occurs. However, this can only be done by an admin. Audit Area As above, but displays the area information instead. Audit Region As above, but displays the region information instead. Archived SQL Data Type: Boolean The archived status of a given inspection. You are able to download everything from your account including archived inspections if you want. If this config option is enabled, anything downloaded from the archive will be marked as True. Tip Archiving an audit causes the modified date to update, as such the tool will re-download anything moved to the archive along with its new archived status.","title":"Columns"},{"location":"understanding-the-data/datastructure/#columns","text":"The exported data is split down into many columns which can appear confusing at first. Keep in mind that the data from this tool is designed to be pivoted so don't be put off if opening the files in Excel appears unusual. Info The columns are listed here in the same order they appear in the output. All columns are of type String in SQL unless stated otherwise.","title":"Columns"},{"location":"understanding-the-data/datastructure/#itemtype","text":"This column describes the type of item information in this particular row. Possible values are:","title":"ItemType"},{"location":"understanding-the-data/datastructure/#question-types","text":"question list media signature slider text textsingle address checkbox datetime drawing","title":"Question Types"},{"location":"understanding-the-data/datastructure/#organisational-elements","text":"category section smartfield information","title":"Organisational Elements"},{"location":"understanding-the-data/datastructure/#repeating-section-related-elements","text":"dynamicfield element primelement Tip In some cases, the type may change between question and list. This occurs if the response set associated with a question changes. A question becomes a list type under these circumstances: More than 5 possible response options One response is more than 30 characters in length Tip In some cases, the type may change between text and textsingle. This occurs if the text field is changed from a single line to a paragraph.","title":"Repeating Section-Related Elements"},{"location":"understanding-the-data/datastructure/#label","text":"The question itself asked within the given inspection. Tip If a question is reworded, any newly completed inspections will have the new label so be careful filtering on the label.","title":"Label"},{"location":"understanding-the-data/datastructure/#response","text":"The given by the person conducting the audit.","title":"Response"},{"location":"understanding-the-data/datastructure/#comment","text":"iAuditor allows users to add notes to questions. If any notes have been left on a question, they'll be logged here Tip These are essentially free text fields so users can type whatever they want. Visualisations like Word Clouds may be a good choice with these, or picking out key words.","title":"Comment"},{"location":"understanding-the-data/datastructure/#mediahypertextreference","text":"iAuditor allows users to add images to almost all question types. If one or more images have been attached to a question, they will be logged in this column. All images in iAuditor are given a unique ID which we call a media_id . When logged in this column, we use media_id and append the file extension. Tip Usually the image format is .jpg however we support other image formats. It's also possible this could change over time, hence why it's logged here rather than assumed. This exporter tool allows for the exporting of media. When you do this, the images are stored in the same format logged here ( media_id + file extension) making it easy to reference images you've downloaded. If you want to make API calls to the media_id , you'll need to split the column first and remove the file extension.","title":"MediaHyperTextReference"},{"location":"understanding-the-data/datastructure/#latitude","text":"Some questions in iAuditor, such as the location and address item types can have location information attached to them. If that information is available, it is logged here.","title":"Latitude"},{"location":"understanding-the-data/datastructure/#longitude","text":"See Latitude","title":"Longitude"},{"location":"understanding-the-data/datastructure/#itemscore","text":"SQL Data Type : Float If a question has been scored (this is set when creating a template), its score is logged here. Tip Item scores can be decimals so consider this column a Float .","title":"ItemScore"},{"location":"understanding-the-data/datastructure/#itemmaxscore","text":"SQL Data Type: Float The maximum score a question can potentially score.","title":"ItemMaxScore"},{"location":"understanding-the-data/datastructure/#itemscorepercentage","text":"SQL Data Type: Float The percentage score of a question. Tip The percentage is represented in full, so 100% is shown as 100. Depending on your tool, you may wish to divide this column by 100 so it renders correctly as a percentage. (this is the case in PowerBI)","title":"ItemScorePercentage"},{"location":"understanding-the-data/datastructure/#mandatory","text":"SQL Data Type: Boolean In the iAuditor template editor, questions can be marked as mandatory (e.g. an inspection cannot be marked as complete until all mandatory questions have been answered.) All items are given either a True or False value.","title":"Mandatory"},{"location":"understanding-the-data/datastructure/#failedresponse","text":"SQL Data Type: Boolean Particular responses in iAuditor can be given a failed status. This means that the particular response was considered to be something incorrect and tends to be an important data point to review.","title":"FailedResponse"},{"location":"understanding-the-data/datastructure/#inactive","text":"SQL Data Type: Boolean Sometimes questions within inspections may never be seen by the user. For example, we have logic fields where questions appear depending on the response of a previous question. In these instances, the questions that were not activated by the logic field would be considered inactive. By default, the exporter does not export inactive items so usually this is False for everything.","title":"Inactive"},{"location":"understanding-the-data/datastructure/#auditid","text":"SQL Note: Forms part of the Primary Key in SQL This is the unique ID of a particular audit. Tip Unique across the entire iAuditor platform - not just your own organisation. Never changes.","title":"AuditID"},{"location":"understanding-the-data/datastructure/#itemid","text":"SQL Note: Forms part of the Primary Key in SQL Every item in a particular inspection is allocated an Item ID. Tip Item IDs are only unique within an inspection . The ID is inherited from the parent template, so questions will have the same Item ID across audits conducted from the same template.","title":"ItemID"},{"location":"understanding-the-data/datastructure/#datepk","text":"SQL Note: Forms part of the Primary Key in SQL The date presented in EPOCH format (e.g. number of seconds since January 1st 1970) - Exists to be used as part of three column primary key with AuditID and ItemID. Please see the Primary Key section for further explanation.","title":"DatePK"},{"location":"understanding-the-data/datastructure/#responseid","text":"Any response that isn't free text will be assigned an ID. These are unique within an audit . If you want to track a particular response, tracking the ID is usually more robust as it avoids any issues should someone rename a response.","title":"ResponseID"},{"location":"understanding-the-data/datastructure/#parentid","text":"All items (except the very top item) have a parent ID which signifies the item that the current item proceeds. Traversing the ItemID > ParentID chain can help make sense of how a particular inspection is conducted.","title":"ParentID"},{"location":"understanding-the-data/datastructure/#auditowner","text":"The name of the user who originally started the inspection","title":"AuditOwner"},{"location":"understanding-the-data/datastructure/#auditownerid","text":"As above, but returns the unique User ID of the particular user.","title":"AuditOwnerID"},{"location":"understanding-the-data/datastructure/#auditauthor","text":"The name of the user who last modified the inspection","title":"AuditAuthor"},{"location":"understanding-the-data/datastructure/#auditauthorid","text":"As above, but returns the unique User ID of the particular user.","title":"AuditAuthorID"},{"location":"understanding-the-data/datastructure/#auditname","text":"The title of the inspection as generated in iAuditor","title":"AuditName"},{"location":"understanding-the-data/datastructure/#auditscore","text":"SQL Data Type: Float The score of the entire inspection","title":"AuditScore"},{"location":"understanding-the-data/datastructure/#auditmaxscore","text":"SQL Data Type: Float The maximum score the particular inspection can achieve","title":"AuditMaxScore"},{"location":"understanding-the-data/datastructure/#auditscorepercentage","text":"SQL Data Type: Float The percentage score of the given inspection. Tip The percentage is represented in full, so 100% is shown as 100. Depending on your tool, you may wish to divide this column by 100 so it renders correctly as a percentage. (This is the case in PowerBI)","title":"AuditScorePercentage"},{"location":"understanding-the-data/datastructure/#auditduration","text":"SQL Data Type: Integer The time taken to conduct an inspection, recorded in seconds. Tip If a user conducts an inspection using our website, the duration isn't currently logged and will return blank.","title":"AuditDuration"},{"location":"understanding-the-data/datastructure/#datestarted","text":"SQL Data Type: DateTime The date the inspection was started presented in UTC format. Tip This is the date when the inspection was created on our platform. In the majority of cases, this will be the same or very close to the 'ConductedOn' date, however sometimes it may appear wildly different. If an inspection is started (most likely via our API), then subsequently edited and completed by a user, the DateStarted may appear anomalous. Where possible, use ConductedOn instead.","title":"DateStarted"},{"location":"understanding-the-data/datastructure/#datemodified","text":"SQL Data Type: DateTime The date the inspection was last modified presented in UTC format. Tip The date modified will update whenever an inspection is modified by a user, so it's possible that this may change after an inspection has been marked as complete.","title":"DateModified"},{"location":"understanding-the-data/datastructure/#datecompleted","text":"SQL Data Type: DateTime The date the inspection was last marked as complete presented in UTC format. Tip The date completed will update if 'Complete' is pressed in the inspection a second time, usually after modifications have been made.","title":"DateCompleted"},{"location":"understanding-the-data/datastructure/#templateid","text":"The unique ID of the template. Tip The Template ID is unique across the entire iAuditor platform The Template ID never changes","title":"TemplateID"},{"location":"understanding-the-data/datastructure/#templatename","text":"The name of the template at the time the inspection was completed","title":"TemplateName"},{"location":"understanding-the-data/datastructure/#templateauthor","text":"The user who created the template","title":"TemplateAuthor"},{"location":"understanding-the-data/datastructure/#templateauthorid","text":"As above, but the unique User ID is returned instead.","title":"TemplateAuthorID"},{"location":"understanding-the-data/datastructure/#itemcategory","text":"Within a template, questions can be nested inside sections and categorys . For each item in the inspection, we traverse the ItemID and ParentID chain until we find a item type of either section or category . When this occurs, the label of that item is logged here. Tip The ItemCategory column is incredibly useful for grouping data together with like questions. You may need to work with those creating templates to ensure questions are nested effectively to give the required ItemCategory","title":"ItemCategory"},{"location":"understanding-the-data/datastructure/#repeatingsectionparentid","text":"Within iAuditor, it is possible to have sets of questions that users can chose to repeat. For example, if you're inspecting rooms in a hotel, you may use a repeating section to repeat the same set of questions for each room within the hotel. To make modelling easier, this column contains the ID of the item that all questions within a repeating section have in common. If you're working with repeating sections (they're of type dynamicfield ), you'll want to group the data on this column. If a question isn't part of a repeating section, this column will be blank.","title":"RepeatingSectionParentID"},{"location":"understanding-the-data/datastructure/#documentno","text":"This is an optional feature of iAuditor where a document number is generated. This is usually different in each template. Tip Document Numbers will have an incrementing number as part of the resulting value. However, this is created by a users device so it's possible that multiple inspections could have the same document number. For this reason, it tends to be less useful to model on the Document Number.","title":"DocumentNo"},{"location":"understanding-the-data/datastructure/#conductedon","text":"SQL Data Type: DateTime Assuming the template includes the 'Conducted On' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with a UTC time stamp. As this is a question, it's possible for the user to pick any time value they like, however usually they'll tap 'Now' and it'll insert the current time.","title":"ConductedOn"},{"location":"understanding-the-data/datastructure/#preparedby","text":"Assuming the template includes the 'Prepared By' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with the name of the person who conducted the inspection.","title":"PreparedBy"},{"location":"understanding-the-data/datastructure/#location","text":"Assuming the template includes the 'Location' question in its title page (if you're reviewing the JSON, this is referred to as the 'header'), this will be populated with the inputted location. The formatting of this can vary quite a bit, for better location tracking use the Latitude and Longitude columns.","title":"Location"},{"location":"understanding-the-data/datastructure/#personnel","text":"This is an old field from an older version of our template editor. We've now removed this as an option so it'll only be populated if you're accessing data from an organisation created before late-2019. The field was a free text field so its input will vary depending on use case.","title":"Personnel"},{"location":"understanding-the-data/datastructure/#clientsite","text":"This is an old field from an older version of our template editor. We've now removed this as an option so it'll only be populated if you're accessing data from an organisation created before late-2019. The field was a free text field so its input will vary depending on use case.","title":"Clientsite"},{"location":"understanding-the-data/datastructure/#auditsite","text":"The selected Site (specifically referring to the iAuditor Sites feature) Tip Sites are centrally managed by an admin and so make for a great way to group data together. Sites can be renamed so they may change in the data if this occurs. However, this can only be done by an admin.","title":"AuditSite"},{"location":"understanding-the-data/datastructure/#audit-area","text":"As above, but displays the area information instead.","title":"Audit Area"},{"location":"understanding-the-data/datastructure/#audit-region","text":"As above, but displays the region information instead.","title":"Audit Region"},{"location":"understanding-the-data/datastructure/#archived","text":"SQL Data Type: Boolean The archived status of a given inspection. You are able to download everything from your account including archived inspections if you want. If this config option is enabled, anything downloaded from the archive will be marked as True. Tip Archiving an audit causes the modified date to update, as such the tool will re-download anything moved to the archive along with its new archived status.","title":"Archived"},{"location":"understanding-the-data/overview/","text":"Understanding the output from the iAuditor Exporter Tool The iAuditor Exporter tool has been created to help make it easier to take the data given by our API and import it into BI tools such as PowerBI, Qlik and Tableau. The tool can currently export both inspection data and actions data into either CSV files or directly into a SQL database. In this section Guidance on deciding between CSV or SQL to store your data Explanations of all the columns found in the dataset Details of the SQL table the script automatically creates","title":"Understanding the output from the iAuditor Exporter Tool"},{"location":"understanding-the-data/overview/#understanding-the-output-from-the-iauditor-exporter-tool","text":"The iAuditor Exporter tool has been created to help make it easier to take the data given by our API and import it into BI tools such as PowerBI, Qlik and Tableau. The tool can currently export both inspection data and actions data into either CSV files or directly into a SQL database.","title":"Understanding the output from the iAuditor Exporter Tool"},{"location":"understanding-the-data/overview/#in-this-section","text":"Guidance on deciding between CSV or SQL to store your data Explanations of all the columns found in the dataset Details of the SQL table the script automatically creates","title":"In this section"},{"location":"understanding-the-data/the-model/","text":"The Database Model As part of the SQL support in this tool, if the table doesn't already exist, the script will attempt to create it for you. This document will explain the structure of the database, and how we manage Primary Keys. As discussed here , the AuditID is always unique for a particular inspection, and the ItemID is always unique for a particular item within an inspection. This allows us to reference a item uniquely within the dataset. However, this is making the assumption that an inspection never reappears which isn't necessarily true. The exporter tool (and the API) finds inspections based on the date they were last modified (recorded as the DateModified in the dataset) so if an inspection is modified after first being recorded, we'll see the same inspection reappear. Due to this, the database can be configured to manage this in different ways. Primary Keys In a lot of databases, the Primary Key would be a single column however when working with iAuditor, we combine either two or three columns to obtain a unique reference. By defining what makes a column unique, we can also use it as a means to update records that already exist. If merge_rows/actions_merge_rows is disabled When this is set to false in the config file, the Primary Key of the database is formed using three columns: * AuditID * ItemID * DatePK We've already discussed how the AuditID and ItemID can form a unique reference, but we need to allow for the possibility of a modified inspection reappearing. This is done using the column DatePK . DatePK is a custom column added by the script (it isn't present in the usual API output), and is the EPOCH representation (the number of seconds since January 1st 1970) of DateModified . It isn't possible to use a column of type DateTime as part of a Primary Key, but we can use a number (a Big Integer in this case) hence the creation of DatePK . By combining these three columns, we can guarantee that all rows are truly unique, no matter when they were modified. Tip When using this method, you'll need to use a SQL statement to only bring in the most recently modified value. If merge_rows/actions_merge_rows is enabled When this is set to true in the config file, the Primary Key of the database is formed using two columns: * AuditID * ItemID Info The exporting of inactive items is also forced to true . See the warning below for some discussion around this. When enabled, we don't use DatePK within our Primary Key, instead relying purely on the AuditID and ItemID to look for unique columns. The script attempts to bulk upload each inspection to the database. If it isn't able to bulk upload the inspection due to a violation of the Primary Key (e.g. there's a duplicate), it goes through each row within the inspection, searches for the AuditID + ItemID row in question and updates the row instead. Warning This setting may seem like the more obvious choice however it has some important caveats: If you get a lot of inspections coming back through (particular prevalent if you've opted to download incomplete inspections as they may be downloaded multiple times during an inspection process), the tool will run slower as it needs to select the duplicate row and update it. The bulk upload that occurs when there is no duplicate is significantly faster. It also has the potential to put additional strain on your SQL server. The exporting of inactive items is forced to true as to ensure every item in the inspection is updated should a change be made. For example, let's say you have an inspection with a logic field which displays 5 questions if you select 'Yes' and 3 questions if you select 'No'. Without enabling the export of inactive items, if the first time we see the inspection, 'Yes' has been selected, the other 3 questions wouldn't be logged at all. This isn't necessarily a problem, but if the inspection is then modified to be 'No', the 5 questions under 'Yes' wouldn't be marked as inactive in the dataset (because they'd be excluded), but the 3 questions under 'No' would still be introduced. In this scenario, the data is rendered incorrect as the questions under 'Yes' would be considered answered in our dataset when in fact they're no longer present. Due to inactive items being exported, your dataset has the potential to be bigger, especially if your templates make heavy use of logic fields. For some templates this could easily double or triple the number of rows created. If you need advice on this setting, please get in touch.","title":"The Database Model"},{"location":"understanding-the-data/the-model/#the-database-model","text":"As part of the SQL support in this tool, if the table doesn't already exist, the script will attempt to create it for you. This document will explain the structure of the database, and how we manage Primary Keys. As discussed here , the AuditID is always unique for a particular inspection, and the ItemID is always unique for a particular item within an inspection. This allows us to reference a item uniquely within the dataset. However, this is making the assumption that an inspection never reappears which isn't necessarily true. The exporter tool (and the API) finds inspections based on the date they were last modified (recorded as the DateModified in the dataset) so if an inspection is modified after first being recorded, we'll see the same inspection reappear. Due to this, the database can be configured to manage this in different ways.","title":"The Database Model"},{"location":"understanding-the-data/the-model/#primary-keys","text":"In a lot of databases, the Primary Key would be a single column however when working with iAuditor, we combine either two or three columns to obtain a unique reference. By defining what makes a column unique, we can also use it as a means to update records that already exist.","title":"Primary Keys"},{"location":"understanding-the-data/the-model/#if-merge_rowsactions_merge_rows-is-disabled","text":"When this is set to false in the config file, the Primary Key of the database is formed using three columns: * AuditID * ItemID * DatePK We've already discussed how the AuditID and ItemID can form a unique reference, but we need to allow for the possibility of a modified inspection reappearing. This is done using the column DatePK . DatePK is a custom column added by the script (it isn't present in the usual API output), and is the EPOCH representation (the number of seconds since January 1st 1970) of DateModified . It isn't possible to use a column of type DateTime as part of a Primary Key, but we can use a number (a Big Integer in this case) hence the creation of DatePK . By combining these three columns, we can guarantee that all rows are truly unique, no matter when they were modified. Tip When using this method, you'll need to use a SQL statement to only bring in the most recently modified value.","title":"If merge_rows/actions_merge_rows is disabled"},{"location":"understanding-the-data/the-model/#if-merge_rowsactions_merge_rows-is-enabled","text":"When this is set to true in the config file, the Primary Key of the database is formed using two columns: * AuditID * ItemID Info The exporting of inactive items is also forced to true . See the warning below for some discussion around this. When enabled, we don't use DatePK within our Primary Key, instead relying purely on the AuditID and ItemID to look for unique columns. The script attempts to bulk upload each inspection to the database. If it isn't able to bulk upload the inspection due to a violation of the Primary Key (e.g. there's a duplicate), it goes through each row within the inspection, searches for the AuditID + ItemID row in question and updates the row instead. Warning This setting may seem like the more obvious choice however it has some important caveats: If you get a lot of inspections coming back through (particular prevalent if you've opted to download incomplete inspections as they may be downloaded multiple times during an inspection process), the tool will run slower as it needs to select the duplicate row and update it. The bulk upload that occurs when there is no duplicate is significantly faster. It also has the potential to put additional strain on your SQL server. The exporting of inactive items is forced to true as to ensure every item in the inspection is updated should a change be made. For example, let's say you have an inspection with a logic field which displays 5 questions if you select 'Yes' and 3 questions if you select 'No'. Without enabling the export of inactive items, if the first time we see the inspection, 'Yes' has been selected, the other 3 questions wouldn't be logged at all. This isn't necessarily a problem, but if the inspection is then modified to be 'No', the 5 questions under 'Yes' wouldn't be marked as inactive in the dataset (because they'd be excluded), but the 3 questions under 'No' would still be introduced. In this scenario, the data is rendered incorrect as the questions under 'Yes' would be considered answered in our dataset when in fact they're no longer present. Due to inactive items being exported, your dataset has the potential to be bigger, especially if your templates make heavy use of logic fields. For some templates this could easily double or triple the number of rows created. If you need advice on this setting, please get in touch.","title":"If merge_rows/actions_merge_rows is enabled"}]}